apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'

Properties properties = new Properties()
File keyStore = project.rootProject.file("config.properties")
if (keyStore.exists()) {
    properties.load(keyStore.newDataInputStream())
}

def increaseVersionCode() {
    def configFile = project.rootProject.file("config.properties")
    if (configFile.exists() && configFile.canRead()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(configFile))
        def versionCode = properties.getProperty("config.versionCode") as Integer
        def runTasks = gradle.startParameter.taskNames
        def realTask = ":master:assembleRelease"
        if (realTask in runTasks) {
            versionCode += 1
            project.logger.error("realTask: ${realTask}, versionCode: ${versionCode}")
            properties['config.versionCode'] = versionCode.toString()
            properties.store(configFile.newWriter(), null)
        }
        return versionCode
    } else {
        throw new GradleException("Could not find config.properties or cannot readable!")
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.yumore.rxmvp.sample"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode increaseVersionCode() as Integer
        versionName "${properties.getProperty("config.versionName")}"
        multiDexEnabled true
        // router
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    signingConfigs {
        release {
            keyAlias properties.getProperty("config.keyAlias")
            keyPassword properties.getProperty("config.keyPassword")
            storeFile file(properties.getProperty("config.storeFile"))
            storePassword properties.getProperty("config.storePassword")
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            crunchPngs false
            zipAlignEnabled false
            jniDebuggable true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            buildConfigField "String", "applicationId", "\"${properties.getProperty("config.applicationId")}\""
            buildConfigField "String", "fileProviderName", "\"${properties.getProperty("config.applicationId")}.fileProvider\""
        }

        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            crunchPngs false
            zipAlignEnabled false
            jniDebuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            buildConfigField "String", "applicationId", "\"${properties.getProperty("config.applicationId")}\""
            buildConfigField "String", "fileProviderName", "\"${properties.getProperty("config.applicationId")}.fileProvider\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    aaptOptions {
        cruncherEnabled !debuggable()
        cruncherProcesses 0
    }

    packagingOptions {
        exclude "META-INF/DEPENDENCIES"
        exclude "META-INF/NOTICE"
        exclude "META-INF/LICENSE"
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/NOTICE.txt"

        doNotStrip "*/armeabi/*.so"
        doNotStrip "*/armeabi-v7a/*.so"
        doNotStrip "*/arm64-v8a/*.so"
        doNotStrip "*/x86/*.so"
        doNotStrip "*/x86_64/*.so"
        doNotStrip "*/mips/*.so"
        doNotStrip "*/mips64/*.so"
    }

    dexOptions {
        jumboMode true
        dexInProcess true
        preDexLibraries true
        maxProcessCount 8
        javaMaxHeapSize "4g"
    }

    lintOptions {
        abortOnError false
        disable "NewApi"
        checkReleaseBuilds false
    }

    if (debuggable()) {
        gradle.taskGraph.whenReady {
            tasks.each { task ->
                if (task.name.contains("Test") || task.name.contains("Lint")) {
                    task.enabled = false
                }
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildTime = new Date().format("yyyyMMddHHmm")
            if (variant.name.toLowerCase().contains("release")) {
                outputFileName = "${project.rootDir.name}-${buildTime}-${defaultConfig.versionName}-${variant.buildType.name}.apk"
                project.logger.error("outputFileName: ${outputFileName}")
            }
        }
    }
}

dependencies {
    implementation project(':traction')
    implementation project(':common')
    implementation project(':example')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'
}
