apply plugin: 'com.android.application'


Properties properties = new Properties()
File keyStore = project.rootProject.file("config.properties")
if (keyStore.exists()) {
    properties.load(keyStore.newDataInputStream())
}

def static buildTime() {
    return new Date().format("yyyyMMddHHmmss")
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.vondear.rxdemo"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias properties.getProperty("config.keyAlias")
            keyPassword properties.getProperty("config.keyPassword")
            storeFile file(properties.getProperty("config.storeFile"))
            storePassword properties.getProperty("config.storePassword")
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            crunchPngs false
            zipAlignEnabled false
            jniDebuggable true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            buildConfigField "String", "applicationId", "\"${properties.getProperty("config.applicationId")}\""
            buildConfigField "String", "fileProviderName", "\"${properties.getProperty("config.applicationId")}.fileProvider\""
        }

        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            crunchPngs false
            zipAlignEnabled false
            jniDebuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            buildConfigField "String", "applicationId", "\"${properties.getProperty("config.applicationId")}\""
            buildConfigField "String", "fileProviderName", "\"${properties.getProperty("config.applicationId")}.fileProvider\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    aaptOptions {
        cruncherEnabled !debuggable()
        cruncherProcesses 0
    }

    packagingOptions {
        exclude "META-INF/DEPENDENCIES"
        exclude "META-INF/NOTICE"
        exclude "META-INF/LICENSE"
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/NOTICE.txt"

        doNotStrip "*/armeabi/*.so"
        doNotStrip "*/armeabi-v7a/*.so"
        doNotStrip "*/arm64-v8a/*.so"
        doNotStrip "*/x86/*.so"
        doNotStrip "*/x86_64/*.so"
        doNotStrip "*/mips/*.so"
        doNotStrip "*/mips64/*.so"
    }

    dexOptions {
        jumboMode true
        dexInProcess true
        preDexLibraries true
        maxProcessCount 2
        javaMaxHeapSize "4g"
    }

    lintOptions {
        abortOnError false
        disable "NewApi"
        checkReleaseBuilds false
    }

    if (debuggable()) {
        gradle.taskGraph.whenReady {
            tasks.each { task ->
                if (task.name.contains("Test") || task.name.contains("Lint")) {
                    task.enabled = false
                }
            }
        }
    }

    afterEvaluate {
        tasks.matching {
            it.name.startsWith("dex")
        }
        .each { dx ->
            if (project.android.defaultConfig.multiDexEnabled) {
                if (dx.additionalParameters == null) {
                    dx.additionalParameters = ['--multi-dex']
                }
                dx.additionalParameters += '--multi-dex'
            }
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.name.toLowerCase().contains("release")) {
                outputFileName = "${project.rootDir.name}-${buildTime()}-${defaultConfig.versionName}-${variant.buildType.name}.apk"
            }
        }
    }
}

dependencies {
    implementation project(':RxUI')
    implementation project(':RxCamera')
    implementation project(':feature')
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.annotation:annotation:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android:flexbox:0.3.2'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'com.jakewharton:butterknife:10.1.0'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'jp.wasabeef:glide-transformations:3.3.0'
    // If you want to use the GPU Filters
    implementation 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'
    implementation 'com.github.yalantis:ucrop:2.2.2-native'
    implementation 'com.jaredrummler:animated-svg-view:1.0.5'
    implementation 'com.afollestad.material-dialogs:core:0.9.3.0'
//    implementation 'com.github.google:cameraview:3eaeac09a7'
    implementation 'com.orhanobut:logger:2.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

}
